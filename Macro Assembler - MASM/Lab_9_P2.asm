; ------- MACROS ------------

MAPEO MACRO I, J ;I = NUMERO FILA BUSCAR, J = COLUMNA A BUSCAR
    XOR EAX, EAX
    MOV AX, I
    MOV BL, 1Ah
    MUL BL
    ADD AX, J
ENDM

.386
.MODEL flat, stdcall
OPTION casemap:none	
INCLUDE		\masm32\include\windows.inc		
INCLUDE     \masm32\include\kernel32.inc
INCLUDE		\masm32\include\masm32.inc
INCLUDE		\masm32\include\masm32rt.inc
.DATA
	I DB (0), 0
	J DB (0), 0
	TAM DB (0) ;TAMAÑO DE MATRIZ I*J
	MATRIZ DB 100 DUP (0)
	MATRIZ2 DB 100 DUP (0)
	TMP DB (0)
	CARACTER DB (0), 0
	MENOR DB (0)
	CONT DB (0)
	CONT2 DB (0)
.DATA?
	
.CODE
PROGRAMA:
	
	; TANTO J COMO I DEBEN DE SER DE UN SOLO DIGITO
	print chr$("Ingrese N", 13, 10) ;FILAS = I = N
	INVOKE StdIn, ADDR I, 3
	print chr$("Ingrese M", 13, 10) ;COLUMNAS = J = M
	INVOKE StdIn, ADDR J, 3
	SUB I, 30H
	SUB J, 30H
	MOV AL, I
	MUL J
	MOV TAM, AL ;GUARDO EL TAMAÑO DE LA MATRIZ J*I
	CALL LLENAR
	print chr$("- - - - - - - ", 13, 10)
	CALL LIMPIAR
	CALL ORDENAR
	CALL IMPRIMIR

	INVOKE ExitProcess,0

; ---------- PROCEDIMIENTOS ---------------
LIMPIAR PROC NEAR ;LIMPIA REGISTROS
	XOR EAX, EAX
	XOR EBX, EBX
	XOR ECX, ECX
	XOR EDX, EDX
RET
LIMPIAR ENDP

LLENAR PROC NEAR
	print chr$("Ingrese los caracteres de la matriz, un enter luego de cada letra", 13, 10)

	CALL LIMPIAR
	LEA ESI, MATRIZ
	MOV AL, 0H ;AL ES EL CONTADOR

	FOR_J:
		MOV TMP, AL
		INVOKE StdIn, ADDR CARACTER, 3
		CALL LIMPIAR
		MOV BL, CARACTER
		MOV [ESI], BL
		MOV AL, TMP
		INC ESI
		INC AL
		CMP AL, TAM
		JZ END_FORJ
		JMP FOR_J
	END_FORJ:
RET
LLENAR ENDP

IMPRIMIR PROC NEAR
	;CADA J IMPRIMIR ENTER

	MOV TAM, 0H ;COMO TAM YA NO SE USA LA PUEDO USAR DE AUX
	XOR ESI, ESI
	LEA ESI, MATRIZ2
	SUB J, 01H
	FOR_I:
		MOV AL, [ESI]
		MOV CARACTER, 0H
		MOV CARACTER, AL
		INVOKE StdOut, ADDR CARACTER
		print chr$("	")

		INC ESI
		MOV AL, [ESI]

		MOV BL, TAM
		CMP BL, J
		JZ ENTER1
		INC TAM

		JMP CONTINUAR
		ENTER1:
			MOV I, AL ;COMO YA NO UTILIZO I ACA SE VUELVE UN AUX MAS
			print chr$(" ", 13,10)
			CALL LIMPIAR
			MOV AL, I
			MOV TAM, 0H
		CONTINUAR:
			CMP AL, 0
			JZ END_FORI
			JMP FOR_I
	END_FORI:

RET
IMPRIMIR ENDP

ORDENAR PROC
	LEA EDI, MATRIZ2
	MOV AL, TAM
	MOV CONT2, AL
	FOR_Q:
		LEA ESI, MATRIZ
		MOV MENOR, 7FH
		MOV CONT, 0H
		FOR_K:
			MOV AL, [ESI]

			MOV BL, CONT
			CMP BL, TAM
			JZ END_FORK

			CMP AL, 0H
			JZ SALTAR0

			CMP AL, MENOR
			JL MENOR_C
		
			INC ESI
			INC CONT
			JMP FOR_K

			MENOR_C:
				MOV MENOR, AL
				MOV ECX, ESI
				INC ESI
				INC CONT
				JMP FOR_K
			SALTAR0:
				INC ESI
				INC CONT
				JMP FOR_K
		END_FORK:
			MOV DL, MENOR
			CALL METER

			MOV ESI, ECX
			MOV DH, 0H
			MOV [ESI], DH

		MOV BL, CONT2
		CMP BL, 0H
		JZ END_FORQ

		SUB CONT2, 1H
		JMP FOR_Q
	END_FORQ:
RET
ORDENAR ENDP

METER PROC NEAR
	MOV DL, [EDI]
	CMP DL, 0H
	JZ METER_M
	JMP END_ORDER
	METER_M:
		MOV DL, MENOR
		MOV [EDI], DL
		INC EDI
	END_ORDER:
RET
METER ENDP

END PROGRAMA